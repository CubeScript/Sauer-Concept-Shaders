// POSTFX Concept Shader to render an upside down cone with faces and outline.
// by @SalatielSauer

shader 0 [conceptshader_cone@getmillis] [
	// --- Vertex Shader ---
	attribute vec4 vvertex;
	@(screentexcoord 0)
	varying vec2 texcoord0;
	
	void main(void) {
		gl_Position = vvertex;
		texcoord0 = vtexcoord0;
	}
] [
	// --- Fragment Shader ---
	uniform sampler2D tex0;
	varying vec2 texcoord0;
	varying vec4 camera;
	uniform mat4 camprojmatrix;
	uniform float millis;
	
	// cone parameters (adjust these as you like)
	uniform vec3 coneCenter = vec3(512.0, 512.0, 512.0); // cone apex position in world space
	uniform vec3 coneSize   = vec3(20.0, 20.0, 40.0);    // cone size (baseWidth, baseDepth, height)
	uniform vec4 outlineColor = vec4(1.5, 1.0, 1.5, 1);    // edge (outline) color
	uniform vec4 faceColor = vec4(0, 0.0, 2.5, 0.2);    // face color

	// projects a world-space point to screen-space
	vec2 projectToScreen(vec3 worldPos, mat4 projMatrix, out bool inFront) {
		vec4 clipSpacePos = projMatrix * vec4(worldPos - camera.xyz, 1.0);
		if (clipSpacePos.w > 0.0) {
			vec3 ndc = clipSpacePos.xyz / clipSpacePos.w;
			inFront = true;
			return ndc.xy;
		}
		inFront = false;
		return vec2(-1.0);
	}

	// distance from point p to line segment ab
	float distanceToSegment(vec2 p, vec2 a, vec2 b) {
		vec2 pa = p - a;
		vec2 ba = b - a;
		float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
		return length(pa - ba * h);
	}

	// checks whether a point p lies inside the quad defined by a, b, c, d
	bool pointInQuad(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d) {
			float cross1 = (b.x - a.x) * (p.y - a.y) - (b.y - a.y) * (p.x - a.x);
			float cross2 = (c.x - b.x) * (p.y - b.y) - (c.y - b.y) * (p.x - b.x);
			float cross3 = (d.x - c.x) * (p.y - c.y) - (d.y - c.y) * (p.x - c.x);
			float cross4 = (a.x - d.x) * (p.y - d.y) - (a.y - d.y) * (p.x - d.x);
			bool allPos = (cross1 >= 0.0) && (cross2 >= 0.0) && (cross3 >= 0.0) && (cross4 >= 0.0);
			bool allNeg = (cross1 <= 0.0) && (cross2 <= 0.0) && (cross3 <= 0.0) && (cross4 <= 0.0);
			return allPos || allNeg;
	}

	void main(void)
	{
		vec4 texColor = texture2D(tex0, texcoord0);
		vec2 screenPos = texcoord0 * 2.0 - 1.0;

		// animate the cone's apex (sway up and down)
		// here we add a sine-based vertical offset. adjust the multiplier (0.001) for speed
		// and (2.0) for amplitude.
		vec3 animatedConeCenter = coneCenter;
		animatedConeCenter.z += sin(millis * 3) * 2.0;

		// generate cone vertices (1 apex + 4 base corners)
		vec3 coneVertices[5];
		coneVertices[0] = animatedConeCenter; // apex
		vec3 baseCenter = animatedConeCenter + vec3(0.0, 0.0, coneSize.z);
		vec2 halfBase = coneSize.xy * 0.5;
		coneVertices[1] = baseCenter + vec3(-halfBase.x, -halfBase.y, 0.0);
		coneVertices[2] = baseCenter + vec3( halfBase.x, -halfBase.y, 0.0);
		coneVertices[3] = baseCenter + vec3( halfBase.x,  halfBase.y, 0.0);
		coneVertices[4] = baseCenter + vec3(-halfBase.x,  halfBase.y, 0.0);

		// cone faces (4 triangular sides as quads, 1 square base)
		ivec4 faces[5] = ivec4[5](
				ivec4(0, 1, 2, 0), // front face
				ivec4(0, 2, 3, 0), // right face
				ivec4(0, 3, 4, 0), // back face
				ivec4(0, 4, 1, 0), // left face
				ivec4(1, 2, 3, 4)  // base face
		);

		vec4 finalColor = texColor;

		// face fill pass: if the pixel lies inside any of the cone faces, blend with faceColor
		for (int i = 0; i < 5; i++) {
				bool inf[4];
				vec2 v0 = projectToScreen(coneVertices[faces[i].x], camprojmatrix, inf[0]);
				vec2 v1 = projectToScreen(coneVertices[faces[i].y], camprojmatrix, inf[1]);
				vec2 v2 = projectToScreen(coneVertices[faces[i].z], camprojmatrix, inf[2]);
				vec2 v3 = projectToScreen(coneVertices[faces[i].w], camprojmatrix, inf[3]);
				
				if (inf[0] && inf[1] && inf[2] && inf[3] && pointInQuad(screenPos, v0, v1, v2, v3)) {
						finalColor = mix(faceColor, finalColor, 1.0 - faceColor.a);
				}
		}

		// reduce outline strength when the cone is far away.
		float d = length(animatedConeCenter - camera.xyz);
		float minDistance = 0.005;
		float adjustedMinDistance = minDistance / (1.0 + d * 0.001);

		// edge pass (8 edges: 4 from apex, 4 base edges)
		ivec2 edges[8] = ivec2[8](
				ivec2(0,1), ivec2(0,2), ivec2(0,3), ivec2(0,4),
				ivec2(1,2), ivec2(2,3), ivec2(3,4), ivec2(4,1)
		);
		
		for (int i = 0; i < 8; i++) {
				bool inf[2];
				vec2 v0 = projectToScreen(coneVertices[edges[i].x], camprojmatrix, inf[0]);
				vec2 v1 = projectToScreen(coneVertices[edges[i].y], camprojmatrix, inf[1]);
				if (inf[0] && inf[1]) {
						float dist = distanceToSegment(screenPos, v0, v1);
						finalColor = mix(finalColor, outlineColor, 1.0 - smoothstep(0.0, adjustedMinDistance, dist));
				}
		}

		// add a subtle bloom/glow effect around the apex of the cone.
		// we project the animated apex to screen space and then add extra brightness
		// based on distance from that point.
		bool apexInFront;
		vec2 apexScreen = projectToScreen(animatedConeCenter, camprojmatrix, apexInFront);
		if (apexInFront) {
				float glowRadius = 0.2;
				float glowFactor = 1.0 - smoothstep(0.0, glowRadius, length(screenPos - apexScreen));
				finalColor.rgb += faceColor.rgb * glowFactor * 0.12; // adjust intensity as needed
		}
		
		gl_FragColor = finalColor;
	}
]

//clearpostfx
setpostfx [conceptshader_cone@getmillis]
