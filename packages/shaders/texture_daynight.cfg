// Texture Concept Shader to simulate a transition from day to night.
// it uses lights with different colors to enable the transition between "two" lightmaps, which are actually just the color channels.
// by @SalatielSauer

// the maps/daynight.ogz map can be used to test this shader.

// set the window property by selecting a texture and typing /vshaderparam window 1 0.5
// where 1 controls whether the fragment is part of a window or a non-window surface, and 0.5 tells when to turn the window on.
defuniformparam "window" 0 0 0 0

defuniformparam "time" (+ (getmillis) (* (? (m_edit (getmode)) 600 $timeremaining) 1000))

// debug
// set to 1 to see the night mask, 2 to see the day mask, 3 to see the actual lightmap, 4 to see texture*lightmap
// set to 0 to see the day-night transition.
defuniformparam "dbg_conceptshader_daynight" 0
//echo $timeremaining
//_start = (+ (getmillis) (* 10 1000))
// x = [ echo (- $_start (getmillis)) ; sleep 0 [x] ]

if (= $timeremaining 0) [
    defuniformparam "time" (+ (getmillis) (* 600 1000))
]

shader 0 [_conceptshader_daynight@getmillis] [
    // --- Vertex Shader ---
    attribute vec4 vvertex;
    attribute vec3 vnormal;
    attribute vec2 vtexcoord0, vtexcoord1, vtexcoord2;
    uniform mat4 camprojmatrix;
    uniform vec2 texgenscroll;
    varying vec2 texcoord0, texcoord1;
    uniform vec3 camera;
    
    void main(void)
    {
        gl_Position = camprojmatrix * vvertex;

        texcoord0 = vtexcoord0 + texgenscroll;
        texcoord1 = vtexcoord1 * @lmcoordscale;
    }
] [
    // --- Fragment Shader ---
    uniform vec4 colorparams;
    varying vec2 texcoord0, texcoord1;
    uniform sampler2D diffusemap, lightmap, tex2;
    uniform float millis;
    //uniform vec4 ambient;

    void main(void) 
    {
        // calculate time remaining as a normalized value between [0, 1]
        float normalizedTime = (max(time.x, 1) - (millis*1000))/(600 * 1000);
        float sunsetTime = clamp(normalizedTime-0.2, 0.0, 1.0);
        // clamp normalizedTime to ensure it stays within the range [0, 1]
        normalizedTime = clamp(normalizedTime, 0.0, 1.0);

        // fetch the textures
        vec4 daytexture = texture2D(diffusemap, texcoord0);
        vec4 nightwindow = texture2D(tex2, texcoord0);
        vec4 lightmap_day = texture2D(lightmap, texcoord1);
        vec4 lightmap_night = texture2D(lightmap, texcoord1);
        vec4 day_mask = vec4(vec3(lightmap_day.r), 1.0);      // Red channel from day map
        vec4 night_mask = vec4(vec3(lightmap_night.b), 1.0);  // Blue channel for night map

        // use the night window texture only if it is active
        //vec4 blendedTexture = (window.x == 1.0 && normalizedTime < (0.7 - window.y/20)) 
        vec4 blendedTexture = (window.x == 1.0 && normalizedTime < window.y/20) 
            ? mix(nightwindow * 12.0, daytexture, normalizedTime) 
            : daytexture;

        // adjust brightness for non-window textures to ensure visibility at night
        vec4 finalColor = mix(
            blendedTexture, 
            blendedTexture - vec4(0.1, 0.1, 0.1, 1.0), 
            (window.x == 0.0) ? 1.0 - normalizedTime : 0.0
        );

        // gradually fade the lightmap at night to keep it dim instead of fully black
        night_mask = vec4(night_mask - (normalizedTime*0.1));
        day_mask -= vec4(1.0-(normalizedTime/0.9));
        vec4 finalLight = mix(day_mask, night_mask, 1.0 - normalizedTime);

        // combine the textures with the fading lightmap
        gl_FragColor = (dbg_conceptshader_daynight.x == 1) ? night_mask : (dbg_conceptshader_daynight.x == 2) ? day_mask : (dbg_conceptshader_daynight.x == 3) ? lightmap_day : (dbg_conceptshader_daynight.x == 4) ? daytexture * lightmap_day : finalColor * finalLight;
    }
]

texturereset

setshader [_conceptshader_daynight@getmillis]
// textures that will use the shader must come after the setshader command:
texture 0 "gor/GR_GK_009_cc.jpg"
texture 0 "egyptsoc/stone08b.jpg"
texture 0 "egyptsoc/block10b.jpg"
texture 0 "textures/philipk/pk02/floor12_s.jpg"
texture 0 "textures/philipk/pk02/wall_big01b_c.jpg"
texture 0 "textures/philipk/pk02/wall04a_s.jpg"
texture 0 "textures/philipk/pk02/plates01b_s.jpg" 0 128 0 0.5
texture 1 "textures/philipk/pk02/plates01b_c.jpg" 0 128 0 0.5
texture 0 "textures/yves_allaire/ex/clangfloor_01_d.jpg"
texture 0 "textures/yves_allaire/ex/clangfloor_01b_d.jpg"
texture 0 "textures/yves_allaire/ex/cretebase_02_d.jpg"
texture 0 "textures/yves_allaire/ex/cretebase_03_dark_d.jpg"
texture 0 "textures/yves_allaire/ex/cretefloor_01_d.jpg"
texture 0 "textures/yves_allaire/ex/cretefloor_01b_d.jpg"
texture 0 "textures/yves_allaire/ex/cretewall_01_d.jpg"
texture 0 "textures/yves_allaire/ex/metal_rib_01_d.jpg"

shader 0 [_conceptshader_skybox@getmillis] [
    // --- Vertex Shader ---
    attribute vec4 vvertex;
    attribute vec3 vnormal;
    attribute vec2 vtexcoord0, vtexcoord1, vtexcoord2;
    uniform mat4 camprojmatrix;
    uniform vec2 texgenscroll;
    varying vec2 texcoord0, texcoord1;
    varying vec3 normal;
    varying vec3 camvec; 
    uniform vec3 camera;
    
    void main(void)
    {
        normal = vnormal;
        camvec = camera - vvertex.xyz; 
        gl_Position = camprojmatrix * vvertex;

        texcoord0 = vtexcoord0 + texgenscroll;
        texcoord1 = vtexcoord1 * @lmcoordscale;
    }
] [
    varying vec2 texcoord0;
    varying vec4 color;
    varying vec3 normal;
    varying vec3 camvec;  // Changed from vec4 to vec3
    
    uniform samplerCube envmap;

    void main(void)
    {
        // Compute the reflection vector as before.
        vec3 r = 2.0 * normal * dot(camvec, normal) - camvec;
        // Flip the Y component to correct the upside-down appearance.
        r.z = -r.z;
        vec3 reflect = textureCube(envmap, r).rgb;
        gl_FragColor = vec4(reflect, 1.0);
    }
]

setshader [_conceptshader_skybox@getmillis]

texture 0 "skyboxes/darkness_ft.png"
texture "e" "skyboxes/darkness"