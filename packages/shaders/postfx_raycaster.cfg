// POSTFX Concept Shader to render a raycasting demo scene.
// by @SalatielSauer

lazyshader 0 [guicanvas@getmillis] [
	// Vertex shader
	attribute vec4 vvertex, vcolor;
	attribute vec2 vtexcoord0;
	@(screentexcoord 0)
	uniform vec2 postfxscale;
	varying vec2 texcoord0;
	varying vec4 vertexColor;
	uniform mat4 camprojmatrix;
	uniform vec4 camera;

	void main(void)
	{
		gl_Position = vvertex;
		texcoord0 = vtexcoord0;
		vertexColor = vcolor;
	}
] [
	// Fragment shader

	// Uniforms
	uniform sampler2D tex0, tex1, tex2, tex3, depthmap;
	uniform float screenWidth = @scr_w;
	uniform float screenHeight = @scr_h;
	uniform float stepSize = 0.01;
	uniform float maxDistance = 20.0;
	uniform float fovDegrees = @fov;
	float fovRadians = radians(fovDegrees);
	uniform float millis;
	uniform vec4 camera;
	uniform mat4 camprojmatrix;

	// Varyings
	varying vec2 texcoord0;
	varying vec4 vertexColor;

	// Map Data
	const int MAP_WIDTH = 10;
	const int MAP_HEIGHT = 20;
	const int MAP_SIZE = MAP_WIDTH * MAP_HEIGHT;
	const int MAX_LIGHTS = 10;

	const int mapData[MAP_SIZE] = int[](
		2,1,1,1,1,1,1,1,1,1,
		1,0,0,1,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,1,
		1,0,0,1,0,0,0,0,0,1,
		1,0,0,0,1,0,0,0,0,1,
		1,0,1,-1,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,1,1,
		1,0,0,0,0,2,0,0,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,-1,0,1,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,3,0,0,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,0,0,1,0,0,-1,0,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,0,0,0,0,0,0,0,0,1,
		1,1,1,1,1,1,1,1,1,1
	);

	// Constants
	const int TEXTURE_WIDTH = 128;
	const int TEXTURE_HEIGHT = 128;
	const float PI = 3.14159265;

	// Light positions
	int numLights = 0;
	vec2 lightPositions[MAX_LIGHTS];

	// Functions
	vec2 getUVFromIndex(int index) {
		int x = index % TEXTURE_WIDTH;
		int y = index / TEXTURE_WIDTH;
		return vec2((float(x) + 0.5) / float(TEXTURE_WIDTH), (float(y) + 0.5) / float(TEXTURE_HEIGHT));
	}

	mat4 constructProjectionMatrix(float fovy, float aspect, float znear, float zfar) {
		float f = 1.0 / tan(fovy / 2.0);
		mat4 M = mat4(0.0);
		M[0][0] = f / aspect;
		M[1][1] = f;
		M[2][2] = (zfar + znear) / (znear - zfar);
		M[2][3] = -1.0;
		M[3][2] = (2.0 * zfar * znear) / (znear - zfar);
		return M;
	}

	vec2 extractYawPitch(mat4 camMatrix) {
		mat3 R = mat3(camMatrix);
		vec3 forward = -vec3(R[0][2], R[1][2], R[2][2]);
		float yaw = atan(forward.x, forward.y);
		float pitch = asin(forward.z);
		return vec2(yaw, pitch);
	}

	void initializeLightPositions() {
		numLights = 0;
		for (int i = 0; i < MAP_SIZE; i++) {
			if (mapData[i] == -1) {
				if (numLights < MAX_LIGHTS) {
					int x = i % MAP_WIDTH;
					int y = i / MAP_WIDTH;
					lightPositions[numLights] = vec2(float(x) + 0.5, float(y) + 0.5);
					numLights++;
				}
			}
		}
	}

	float computeLightIntensity(vec2 worldPosition) {
		float lightIntensity = 0.0;
		for (int i = 0; i < numLights; ++i) {
			vec2 lightPos = lightPositions[i];
			float distanceToLight = length(worldPosition - lightPos);
			float intensity = 2.0 / (distanceToLight * distanceToLight);
			lightIntensity += intensity;
		}
		lightIntensity = clamp(lightIntensity, 0.2, 1.0); // Ensure minimum brightness
		return lightIntensity;
	}

	// Main Function
	void main(void) {
		initializeLightPositions();

		// Extract A and B from the camera projection matrix
		float A = camprojmatrix[2][2];
		float B = camprojmatrix[2][3];

		// Calculate near and far planes
		float nearPlane = B / (A - 1.0);
		float farPlane = B / (A + 1.0);

		// Reconstruct the projection matrix
		float aspectRatio = screenWidth / screenHeight;
		mat4 projectionMatrix = constructProjectionMatrix(fovDegrees, aspectRatio, nearPlane, farPlane);

		// Invert the projection matrix and compute the view matrix
		mat4 inverseProjection = inverse(projectionMatrix);
		mat4 viewMatrix = inverseProjection * camprojmatrix;

		// Extract yaw and pitch from the view matrix
		vec2 yawPitch = extractYawPitch(viewMatrix);
		float yaw = -yawPitch.x; // Yaw in radians
		float pitch = yawPitch.y;

		// Calculate pitch offset and adjust pitch effect
		float pitchOffset = tan(pitch) * (screenHeight / 2.0);
		float pitchCos = cos(pitch);
		float pitchSin = sin(pitch);

		// Player's position and direction
		float playerX = (camera.x-490) / 16.0;
		float playerY = (camera.y - 462) / 16.0;
		float playerZ = camera.z / 32.0;
		float playerDirection = yaw + radians(90.0);

		// Compute the ray angle based on the fragment's x position
		float xCoord = texcoord0.x * screenWidth;
		float rayAngle = playerDirection - (fovRadians / 2.0) + (xCoord / screenWidth) * fovRadians;
		rayAngle = mod(rayAngle + 2.0 * PI, 2.0 * PI); // Normalize angle

		float angleDifference = rayAngle - playerDirection;
		float cosAngleDifference = cos(angleDifference) + 0.0001;

		// Initialize DDA variables
		float sinRayAngle = sin(rayAngle);
		float cosRayAngle = cos(rayAngle);
		float rayX = playerX;
		float rayY = playerY;
		float distanceToWall = 0.0;
		bool hit = false;
		int cellValue = 0;
		float wallX = 0.0;
		vec2 hitPosition = vec2(0.0);

		int mapX = int(floor(rayX));
		int mapY = int(floor(rayY));
		float rayDirX = cosRayAngle;
		float rayDirY = sinRayAngle;

		// Calculate delta distances
		float deltaDistX = (rayDirX == 0.0) ? 1e30 : abs(1.0 / rayDirX);
		float deltaDistY = (rayDirY == 0.0) ? 1e30 : abs(1.0 / rayDirY);

		float stepX, stepY, sideDistX, sideDistY;

		// Calculate step and initial side distances
		if (rayDirX < 0.0) {
			stepX = -1;
			sideDistX = (rayX - float(mapX)) * deltaDistX;
		} else {
			stepX = 1;
			sideDistX = (float(mapX) + 1.0 - rayX) * deltaDistX;
		}

		if (rayDirY < 0.0) {
			stepY = -1;
			sideDistY = (rayY - float(mapY)) * deltaDistY;
		} else {
			stepY = 1;
			sideDistY = (float(mapY) + 1.0 - rayY) * deltaDistY;
		}

		// DDA algorithm
		int side = 0;
		float maxDistance = 20.0;
		float accumulatedDistance = 0.0;

		for (int i = 0; i < 1000; i++) {
				if (accumulatedDistance > maxDistance) break;
				
				// Step in grid
				if (sideDistX < sideDistY) {
					sideDistX += deltaDistX;
					mapX += int(stepX);
					side = 0;
					accumulatedDistance = sideDistX - deltaDistX;
				} else {
					sideDistY += deltaDistY;
					mapY += int(stepY);
					side = 1;
					accumulatedDistance = sideDistY - deltaDistY;
				}
				
				// Check map bounds
				if (mapX < 0 || mapX >= MAP_WIDTH || mapY < 0 || mapY >= MAP_HEIGHT) break;
				
				// Check cell value
				int index = mapY * MAP_WIDTH + mapX;
				cellValue = mapData[index];
				
				if (cellValue != 0 && cellValue != -1) {
					hit = true;
					break;
				}
		}

		// Calculate final distance and position
		if (hit) {
			distanceToWall = accumulatedDistance;
			hitPosition = vec2(
				playerX + rayDirX * distanceToWall,
				playerY + rayDirY * distanceToWall
			);
			
			// Calculate wallX based on hit side
			if (side == 0) {
				wallX = hitPosition.y - floor(hitPosition.y);
			} else {
				wallX = hitPosition.x - floor(hitPosition.x);
			}
		} else {
			distanceToWall = maxDistance;
		}


		// Correct distance for fish-eye effect
		float perpendicularWallDistance = distanceToWall * cosAngleDifference;

		// Calculate wall slice positions
		float lineHeight = screenHeight / perpendicularWallDistance;
		float wallTop = (screenHeight - lineHeight) / 2.0 - pitchOffset;
		float wallBottom = (screenHeight + lineHeight) / 2.0 - pitchOffset;

		// Clamp wall positions
		wallTop = clamp(wallTop, 0.0, screenHeight);
		wallBottom = clamp(wallBottom, 0.0, screenHeight);

		// Get fragment's y-coordinate
		float yCoord = texcoord0.y * screenHeight;

		// Initialize final color
		vec3 finalColor = vec3(0.0);

	if (yCoord >= wallTop && yCoord <= wallBottom) {
			// Horizontal texture coordinate (existing code)
			wallX = (side == 0) ? 
					hitPosition.y - floor(hitPosition.y) : 
					hitPosition.x - floor(hitPosition.x);
			
			// Vertical texture coordinate (FIXED)
			float verticalOffset = (yCoord - (screenHeight/2.0 - pitchOffset)) / lineHeight;
			float texY = verticalOffset+0.5;
			
			// Apply texture repeating
			texY = fract(texY);
			
			vec2 uv = vec2(wallX, texY);
			//vec4 texColor = texture2D(tex0, uv);
			
			//int texIndex = texY * TEXTURE_WIDTH + texX;
			//vec2 uv = getUVFromIndex(texIndex);
			vec4 texColor = vec4(0.3, 0.1, 0.3, 0.0); // Default color

			if (cellValue == 3) {
				texColor = texture2D(tex0, uv);
				//texColor.x += cos((millis * 4.0) * 0.3);
				//texColor.y += cos((millis * 4.0) * 0.1);
				//texColor.z += cos((millis * 4.0) * 0.5);
			}

			if (cellValue == 2) {
				texColor = texture2D(tex1, uv);
			}

			vec3 color = vec3(texColor.x, texColor.y, texColor.z);

			// Compute light intensity
			float lightIntensity = computeLightIntensity(hitPosition);

			finalColor = color * lightIntensity;

			gl_FragColor = vec4(finalColor, 1.0);

			float time = sin(millis);
			if ( (uv.y > 0 && uv.y < 0.2) || (uv.y > 0.90 && uv.y < 1)) {
				gl_FragColor = vec4(finalColor.rgb/6, 1.0);
			}

		} else {
			// Floor and Ceiling rendering
			float adjustedY = yCoord + pitchOffset;

			float rowDistance = (adjustedY < (screenHeight / 2.0))
				? (screenHeight / 2.0) / ((screenHeight / 2.0) - adjustedY)
				: (screenHeight / 2.0) / (adjustedY - (screenHeight / 2.0));

			float currentDistance = rowDistance / (cosAngleDifference * pitchCos);
			float floorX = playerX + cosRayAngle * currentDistance;
			float floorY = playerY + sinRayAngle * currentDistance;
			float floorZ = playerZ + pitchSin * currentDistance;
			vec2 floorPosition = vec2(floorX, floorY);

			int mapX = int(floor(floorX));
			int mapY = int(floor(floorY));

			// check map bounds
			if (mapX >= 0 && mapX < MAP_WIDTH && mapY >= 0 && mapY < MAP_HEIGHT) {
				int index = mapY * MAP_WIDTH + mapX;
				cellValue = mapData[index];
			} else {
				cellValue = 0; // default to empty cell
			}

			float texXCoord = fract(floorX);
			float texYCoord = fract(floorY);

			int texX = int(texXCoord * float(TEXTURE_WIDTH));
			int texY = int(texYCoord * float(TEXTURE_HEIGHT));

			texX = clamp(texX, 0, TEXTURE_WIDTH - 1);
			texY = clamp(texY, 0, TEXTURE_HEIGHT - 1);

			int texIndex = texY * TEXTURE_WIDTH + texX;
			vec2 uv = getUVFromIndex(texIndex);
			vec4 texColor;

			if (cellValue == 3) {
				texColor = texture2D(tex1, uv);
			} else if (cellValue == 2) {
				texColor = texture2D(tex2, uv);
			} else {
				texColor = vec4(0.0);
			}

			if (yCoord > wallBottom) {
				// Floor
				//texColor = texture2D(tex0, texcoord0);
				texColor = vec4(0.5, 0.5, 0.2, 1.0);
			} else {
				// Ceiling
				//texColor = texture2D(tex0, uv);
				//texColor = vec4(0.2, 0.2, 0.2, 1.0);
				texColor = vec4(0.1, 0.5, 0.2, 1.0);
			}

			vec3 color = vec3(texColor.x, texColor.y, texColor.z);

			// Compute light intensity
			float lightIntensity = computeLightIntensity(floorPosition);

			finalColor = color * lightIntensity;

			gl_FragColor = vec4(finalColor, 1.0);

		}
	}
]

//clearpostfx
setpostfx [guicanvas@getmillis]
