// POSTFX Concept Shader to make you dizzy.
// by @SalatielSauer

shader 0 [conceptshader_camerashake@getmillis] [
	// --- Vertex Shader ---
	attribute vec4 vvertex;
	@(screentexcoord 0)
	varying vec2 texcoord0;
	
	void main(void) {
		gl_Position = vvertex;
		texcoord0 = vtexcoord0;
	}
] [
	// --- Fragment Shader ---
	uniform sampler2D tex0;
	varying vec2 texcoord0;

	uniform float millis;
	
	// shake intensities (you can adjust these)
	uniform float shakeTranslationIntensity = 0.02;
	uniform float shakeRotationIntensity = 0.02;
	
	void main(void) {
		float time = millis * 0.6;
		
		// translation offsets using layered sine waves for slower movement
		float offsetX = sin(time * 10.8) * shakeTranslationIntensity +
										sin(time * 12.1) * (shakeTranslationIntensity * 0.5);
		float offsetY = cos(time * 10.8) * shakeTranslationIntensity +
										cos(time * 12.1) * (shakeTranslationIntensity * 0.5);
		
		// slight rotation based on time
		float angle = sin(time * 32) * shakeRotationIntensity;
		
		// apply rotation around the center of the screen (0.5, 0.5)
		vec2 centered = texcoord0 - vec2(0.5);
		mat2 rotation = mat2(cos(angle), -sin(angle),
												 sin(angle),  cos(angle));
		vec2 rotatedCoord = rotation * centered;
		
		// add the center back and then apply the translation offset
		vec2 finalTexcoord = rotatedCoord + vec2(0.5) + vec2(offsetX, offsetY);
		
		// sample the texture with the modified coordinates
		vec4 color = texture2D(tex0, finalTexcoord);
		
		gl_FragColor = color;
	}
]

//clearpostfx
setpostfx [conceptshader_camerashake@getmillis]
