// POSTFX Concept Shader to render a box with faces and outline.
// by @SalatielSauer

shader 0 [conceptshader_box@getmillis] [
	// --- Vertex Shader ---
	attribute vec4 vvertex;
	@(screentexcoord 0)
	varying vec2 texcoord0;
	
	void main(void) {
		gl_Position = vvertex;
		texcoord0 = vtexcoord0;
	}
] [
	// --- Fragment Shader ---
	uniform sampler2D tex0;
	varying vec2 texcoord0;
	varying vec4 camera;
	uniform mat4 camprojmatrix;
	
	// box parameters
	uniform vec3 boxCenter = vec3(512.0, 512.0, 522.0); // box Position in world space
	uniform vec3 boxSize   = vec3(10.0, 10.0, 20.0);		// box Size (width, height, depth)
	uniform vec4 outlineColor = vec4(0, 0.0, 0, 1.0);			// edge (outline) color
	uniform vec4 faceColor = vec4(1.5, 0.0, 1.5, 0.2);	// face color

	// projects a world-space point to screen-space
	vec2 projectToScreen(vec3 worldPos, mat4 projMatrix, out bool inFront) {
		vec4 clipSpacePos = projMatrix * vec4(worldPos - camera.xyz, 1.0);
		if (clipSpacePos.w > 0.0) {
			vec3 ndc = clipSpacePos.xyz / clipSpacePos.w;
			inFront = true;
			return ndc.xy;
		}
		inFront = false;
		return vec2(-1.0);
	}

	// distance from point p to line segment ab
	float distanceToSegment(vec2 p, vec2 a, vec2 b) {
		vec2 pa = p - a;
		vec2 ba = b - a;
		float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
		return length(pa - ba * h);
	}

	// returns true if point p is inside the convex quadrilateral defined by (a,b,c,d)
	bool pointInQuad(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d) {
			float cross1 = (b.x - a.x) * (p.y - a.y) - (b.y - a.y) * (p.x - a.x);
			float cross2 = (c.x - b.x) * (p.y - b.y) - (c.y - b.y) * (p.x - b.x);
			float cross3 = (d.x - c.x) * (p.y - c.y) - (d.y - c.y) * (p.x - c.x);
			float cross4 = (a.x - d.x) * (p.y - d.y) - (a.y - d.y) * (p.x - d.x);
			bool allPos = (cross1 >= 0.0) && (cross2 >= 0.0) && (cross3 >= 0.0) && (cross4 >= 0.0);
			bool allNeg = (cross1 <= 0.0) && (cross2 <= 0.0) && (cross3 <= 0.0) && (cross4 <= 0.0);
			return allPos || allNeg;
	}

	void main(void)
	{
		vec4 texColor = texture2D(tex0, texcoord0);
		// compute screen position from texture coordinates (range â€“1..1)
		vec2 screenPos = texcoord0 * 2.0 - 1.0;

		// compute the 8 vertices of the box in world space.
		vec3 halfSize = boxSize * 0.5;
		vec3 boxVertices[8];
		boxVertices[0] = boxCenter + vec3(-halfSize.x, -halfSize.y, -halfSize.z);
		boxVertices[1] = boxCenter + vec3( halfSize.x, -halfSize.y, -halfSize.z);
		boxVertices[2] = boxCenter + vec3(-halfSize.x,  halfSize.y, -halfSize.z);
		boxVertices[3] = boxCenter + vec3( halfSize.x,  halfSize.y, -halfSize.z);
		boxVertices[4] = boxCenter + vec3(-halfSize.x, -halfSize.y,  halfSize.z);
		boxVertices[5] = boxCenter + vec3( halfSize.x, -halfSize.y,  halfSize.z);
		boxVertices[6] = boxCenter + vec3(-halfSize.x,  halfSize.y,  halfSize.z);
		boxVertices[7] = boxCenter + vec3( halfSize.x,  halfSize.y,  halfSize.z);

		// define the 6 faces of the box (each face is a quad defined by 4 vertex indices).
		ivec4 faces[6] = ivec4[6](
			ivec4(0, 1, 3, 2),  // front face
			ivec4(4, 5, 7, 6),  // back face
			ivec4(0, 1, 5, 4),  // bottom face
			ivec4(2, 3, 7, 6),  // top face
			ivec4(0, 2, 6, 4),  // left face
			ivec4(1, 3, 7, 5)   // right face
		);

		// we'll accumulate the final color here.
		vec4 finalColor = texColor;
		
		// --- Face Fill Pass ---
		// loop over each face; if the pixel lies inside its projected quad then blend in the face color.
		for (int i = 0; i < 6; i++) {
			bool inFront0, inFront1, inFront2, inFront3;
			vec2 v0 = projectToScreen(boxVertices[faces[i].x], camprojmatrix, inFront0);
			vec2 v1 = projectToScreen(boxVertices[faces[i].y], camprojmatrix, inFront1);
			vec2 v2 = projectToScreen(boxVertices[faces[i].z], camprojmatrix, inFront2);
			vec2 v3 = projectToScreen(boxVertices[faces[i].w], camprojmatrix, inFront3);
			
			// only process faces with all vertices in front of the camera.
			if (inFront0 && inFront1 && inFront2 && inFront3) {
					if (pointInQuad(screenPos, v0, v1, v2, v3)) {
							// blend in the face color (using its alpha as the blend factor).
							finalColor = mix(faceColor, finalColor, 1.0 - faceColor.a);
					}
			}
		}

		// --- Edge (outline) Pass ---
		ivec2 edges[12] = ivec2[12](
			ivec2(0, 1), ivec2(1, 3), ivec2(3, 2), ivec2(2, 0),
			ivec2(4, 5), ivec2(5, 7), ivec2(7, 6), ivec2(6, 4),
			ivec2(0, 4), ivec2(1, 5), ivec2(2, 6), ivec2(3, 7)
		);

    // reduce outline strength when the box is far away.
    float d = length(boxCenter - camera.xyz);
    float minDistance = 0.005;
    float adjustedMinDistance = minDistance / (1.0 + d * 0.001);

		// loop over edges and blend in the outlineColor where the fragment is close to an edge.
		for (int i = 0; i < 12; i++) {
			bool v0InFront, v1InFront;
			vec2 v0Screen = projectToScreen(boxVertices[edges[i].x], camprojmatrix, v0InFront);
			vec2 v1Screen = projectToScreen(boxVertices[edges[i].y], camprojmatrix, v1InFront);
			if (v0InFront && v1InFront) {
				float dist = distanceToSegment(screenPos, v0Screen, v1Screen);
				float lineVisibility = 1.0 - smoothstep(0.0, adjustedMinDistance, dist);
				finalColor = mix(finalColor, outlineColor, lineVisibility);
			}
		}

		gl_FragColor = finalColor;
	}
]
	
//clearpostfx
setpostfx [conceptshader_box@getmillis]
